#!/bin/bash

## Description: Creates a complete WordPress including plugins and wp-cli packages
## Usage: wordpress [flags] [args]
## Example: "ddev wordpress" or "ddev wordpress -cliu" or "ddev wordpress -d"
## ProjectTypes: wordpress

show_help() {
    echo "Creates a complete WordPress including plugins and wp-cli packages"
    echo ""
    echo "Usage:"
    echo "  wordpress [flags]"
    echo ""
    echo "Examples:"
    echo "ddev wordpress"
    echo "ddev wordpress -cliu -clip -wpd"
    echo ""
    echo "Flags:"
    echo "  -cliu, --cli-update     Updates WP-CLI to the latest release"
    echo "  -clip, --cli-packages   Installs a WP-CLI package"
    echo "  -d, --delete            Delete the old WordPress (without additional demand)"
    echo "  -no, --no-install       There is no installation of WordPress"
    echo "  -wpd, --wp-debug        Additional debug variables are set during the installation"
    echo " "
}

download_install_wp() {
    
    while true; do
        echo "
    Please enter site details. Press Ctrl+C at any time to cancel this command completely.
        "
        prompt_for_input "Site Title" WP_TITLE
        prompt_for_input "Site URL" WP_URL
        prompt_for_input "Admin User" WP_ADMIN_USER
        prompt_for_input "Admin Password" WP_ADMIN_PASSWORD
        prompt_for_input "Admin Email" WP_ADMIN_EMAIL

        echo "
    You have entered the following details:
    "
        echo "Site Title: $WP_TITLE"
        echo "Site URL: $WP_URL"
        echo "Admin User: $WP_ADMIN_USER"
        echo "Admin Password: $WP_ADMIN_PASSWORD"
        echo "Admin Email: $WP_ADMIN_EMAIL"
        read -p "
    Are these details correct? (Y/n): " confirmation

        if [ -z "$confirmation" ]; then
            confirmation="yes"
        fi

        case ${confirmation,,} in
            y|yes ) break;;
            n|no ) echo "
    Let's try again.";;
            * ) echo "Please answer yes or no.";;
        esac
    done

    
    
    # if [ -f "/var/www/html/wp-config.php" ]; then
    #     echo "WordPress is probably already installed. That's why I'd rather quit now."
    #     exit 1
    # else

    echo "Download, Create and Install a fresh new WordPress..."

    # set WP_ENVIRONMENT_TYPE env variable just for this initial install, since it hasn't yet been set in config.yaml. This will allow the wp core install to use wp-config-development.php
    # export WP_ENVIRONMENT_TYPE=development
    
    # # add WP_ENVIRONMENT_TYPE to config.yaml, so that wp-config-development.php is used going forward. Sets it to "development", regardless of what it was before.
    
    # # Remove any existing WP_ENVIRONMENT_TYPE entries and re-add it as development
    # yq e 'del(.web_environment[] | select(test("WP_ENVIRONMENT_TYPE"))) ' -i .ddev/config.yaml
    # yq e '.web_environment += ["WP_ENVIRONMENT_TYPE=development"]' -i .ddev/config.yaml


    
    # Add the WPURL entry, set to the value provided as the production URL that is stored in the DB. This will be used by Traefik Middleware to rewrite URLs in the HTML response to be relative paths, such that any URL can be used to access the site while maintaining URL in DB as production - keeps the database consistent and clean, without any search/replace mess
    yq e 'del(.web_environment[] | select(test("WPURL"))) ' -i .ddev/config.yaml
    yq e ".web_environment += [\"WPURL=$WP_URL\"]" -i .ddev/config.yaml
    
    # set php to 8.1 because it has better compatibility with Wordpress 
    # as of WP 6.5, php 8.1 is "compatible, with exceptions" while 8.2 has "beta support"
    # https://make.wordpress.org/core/handbook/references/php-compatibility-and-wordpress-versions/
    #yq e '.php_version = "8.1"' -i .ddev/config.yaml


    # Create a YAML file using here-document
#     cat <<EOF >.ddev/.middleware-template.yaml
# {{ $webEnv := .App.WebEnvironment }}
# relative-location-header:
#   plugin:
#     rewrite-response-headers:
#       rewrites:
#         - header: Location
#           regex: ^https?://[^/]+(/.*)?$|^https?%3A%2F%2F[^/]+(/.*)?$|^https?:\\/\\/[^/]+(/.*)?$
#           # {RequestHost} token is available to be used in the replacement. e.g. replacement: https://{RequestHost}/$2
#           replacement: $1$2$3
# relative-urls-body:
#   plugin:
#     rewrite-response-body:
#       # Keep Last-Modified header returned by the HTTP service.
#       # By default, the Last-Modified header is removed.
#       lastModified: "true"
#       rewrites: {{ range $index, $element := $webEnv }}{{ $keyVal := splitList "=" $element }}{{ if eq (index $keyVal 0) "WPURL" }}
#         - regex: https?://{{ index $keyVal 1 }}(/.*)?|https?%3A%2F%2F{{ index $keyVal 1 }}(/.*)?|https?:\\/\\/{{ index $keyVal 1 }}(/.*)?
#           replacement: $1$2$3 {{ end }}{{ end }}
#       # Available logLevels: (Trace: -2, Debug: -1, Info: 0, Warning: 1, Error: 2)
#       logLevel: 0
#       # monitoring is optional, defaults to below configuration
#       # monitoring configuration limits the HTTP queries that are checked for regex replacement.
#       monitoring:
#         # methods is a string list. Options are standard HTTP Methods. Entries MUST be ALL CAPS
#         # For a list of options: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
#         methods:
#           - GET
#           - POST
#         # types is a string list. Options are HTTP Content Types. Entries should match standard formatting
#         # For a list of options: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
#         # Wildcards(*) are not supported!
#         types:
#           - text/html
#         # checkMimeAccept is a boolean. If true, the Accept header will be checked for the MIME type
#         checkMimeAccept: true
#         # checkMimeContentType is a boolean. If true, the Content-Type header will be checked for the MIME type
#         checkMimeContentType: true
#         # checkAcceptEncoding is a boolean. If true, the Accept-Encoding header will be checked for the encoding
#         checkAcceptEncoding: true
#         # checkContentEncoding is a boolean. If true, the Content-Encoding header will be checked for the encoding
#         checkContentEncoding: true
# EOF

#     echo "YAML file created successfully."




    ## download and install wordpress
    wp core download
    wp core install --url=$WP_URL --title=$WP_TITLE --admin_user=$WP_ADMIN_USER --admin_password=$WP_ADMIN_PASSWORD --admin_email=$WP_ADMIN_EMAIL --skip-email
    
    # #wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db
    # if [ $? -ne 0 ]; then
    #     echo "I guess there was a download error. That's why we're stopping here..."
    #     exit 1
    # fi
    # wp core install --url=$DDEV_PRIMARY_URL --title="$WP_DDEV_TITLE" --admin_user=$WP_DDEV_ADMIN_USER --admin_password=$WP_DDEV_ADMIN_PASSWORD --admin_email=$WP_DDEV_ADMIN_EMAIL --skip-email

    # ## get new salts for your wp-config.php file
    wp config shuffle-salts

    # ## more ram and less more security
    # wp config set WP_POST_REVISIONS false --raw
    # wp config set WP_MEMORY_LIMIT 256M
    # wp config set WP_MAX_MEMORY_LIMIT 512M
    # wp config set DISALLOW_FILE_EDIT true --raw

    # ## set the environment type (https://make.wordpress.org/core/2020/08/27/wordpress-environment-types/)
    # wp config set WP_ENVIRONMENT_TYPE local

    # ## empties a site of its content (posts, comments, terms, and meta)
    # wp site empty --uploads --yes

    # ## delete all default plugins
    # wp plugin delete --all

    # ## delete the default blogdescription
    # wp option update blogdescription ''

    # ## hide for the search engines
    # wp option update blog_public 0

    # ## disable the avatars
    # wp option update show_avatars 0

    # ## change permalinks
    # wp option update permalink_structure '/%postname%/'

    # ## Removes all widgets from the sidebar and places them in Inactive Widgets.
    # wp widget reset --all

    # ## install and activate plugins
    # wp plugin install $WP_DDEV_PLUGINS --activate

    # ## after installing all plugins, update the language
    # wp language plugin install --all $WP_DDEV_LOCALE

    # if $DO_WP_FLAGS_CLIP; then
    #     ## install wp-cli packages
    #     wp package install $WP_DDEV_CLI_PACKAGES
    # fi

    # if $DO_WP_FLAGS_WPD; then
    #     ## wordpress debug mode for developers (https://wordpress.org/support/article/debugging-in-wordpress/)
    #     wp config set WP_DEBUG true --raw
    #     wp config set WP_DEBUG_LOG true --raw
    #     wp config set WP_DEBUG_DISPLAY false --raw
    #     wp config set SCRIPT_DEBUG true --raw
    #     wp config set SAVEQUERIES true --raw
    # fi
    #fi
    
    echo "
    You MUST restart DDEV now in order for the install to work properly - use the \"ddev restart\" command
    "
}

# import_wp() {
    
# }

main() {
    if [ $# -eq 0 ] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        show_help
        exit 0
    fi

    case "$1" in
        install)
            download_install_wp
            ;;
        import)
            import_wp
            ;;
        *)
            show_help
            exit 1
            ;;
    esac
    
}

DO_WP_FLAGS_CLIP=false
DO_WP_FLAGS_WPD=false
DO_WP_INSTALL=true


# prompt for site title, url, admin name, admin pw, admin email
#!/bin/bash

prompt_for_input() {
    local prompt="$1"
    local var_name="$2"
    while true; do
        read -p "$prompt: " input
        if [ -z "$input" ]; then
            echo "$prompt is required."
        else
            eval "$var_name=\$input"
            break
        fi
    done
}




# while :; do
#     case ${1:-} in
#          -h|-\?|--help)
#             show_help
#             exit
#              ;;
#          -cliu|--cli-update)
#             echo "Updates the WP-CLI..."
#             sudo wp cli update --stable --yes
#             echo " "
#              ;;
#          -clip|--cli-packages)
#             DO_WP_FLAGS_CLIP=true
#              ;;
#          -d|--delete)
#             DO_WP_INSTALL=false
#             echo "Delete the old WordPress..."
#             mysql -e 'DROP DATABASE IF EXISTS db; CREATE DATABASE db;'
#             rm -r /var/www/html/*
# 			echo "Done with deleting!"
#             echo " "
#              ;;
#          -no|--no-install)
#             DO_WP_INSTALL=false
#              ;;
#          -wpd|--wp-debug)
#             DO_WP_FLAGS_WPD=true
#              ;;
#          --)              # End of all options.
#             shift
#             break
#              ;;
#          -?*)
#             printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
#              ;;
#          *)               # Default case: No more options, so break out of the loop.
#             break
#     esac7

#     shift
#  done

# if $DO_WP_INSTALL; then   
#     wp_download_create_install
# fi


main "$@"